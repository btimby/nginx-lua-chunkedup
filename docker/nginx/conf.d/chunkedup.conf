server {
    listen          80;
    server_name     'localhost';

    client_max_body_size 30M;
    #client_body_buffer_size 4k;

    location ~ ^/upload/(?P<path>.*)$ {
        content_by_lua_block {
            local method = ngx.req.get_method()

            if method == 'POST' then
                ngx.exec('/upload_post/' .. ngx.var.path)

            elseif method == 'PUT' then
                ngx.exec('/upload_put/' .. ngx.var.path)

            else
                ngx.exec('/upstream' .. ngx.var.path)

            end
        }
    }

    location ~* ^/upload_put/(?P<path>.*)$ {
        internal;

        # For development only.
        lua_code_cache off;

        # Use this instead of ngx.req.read_body()
        lua_need_request_body on;

        client_body_in_file_only on;
        # The following temp path should be a volume shared with backend.
        client_body_temp_path /tmp;

        set $upstream /upstream/$path;
        set $filename $path;

        content_by_lua_file '/usr/local/openresty/lualib/nginx_lua_chunkedup.lua';
    }

    location ~* ^/upload_post/(?P<path>.*)$ {
        internal;

        set $backend_url /upstream/$path;
        set $upload_cleanup '404,500-505';
        # Needs to match client_body_temp_path above.
        set $upload_store '/tmp';

        content_by_lua_file '/usr/local/openresty/lualib/nginx_upload/nginx_lua_upload.lua';
    }

    location /upstream {
        proxy_pass http://127.0.0.1/echo;
        allow 127.0.0.1;
        deny all;
    }

    location /echo {
        echo_duplicate 1 $echo_client_request_headers;
        echo "\r";
        echo_read_request_body;
        echo $request_body;
    }
}
